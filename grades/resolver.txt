=====STUDENT TESTS=====
====Good Tests====
===[good0.bminor Input]===
y:boolean;

===[good0.bminor Output]===
Success!

Program parsed successfully.
Program resolved successfully.


return code: 0


===[good1.bminor Input]===
/* A program is a sequence of declarations */
/* Try a variety of variable declarations. */

n: integer;
m: integer = 20;

b: boolean;
c: boolean = true;
s: string;
t: string = "hello\n";
d: char;
e: char = 'x';

x: array [] string;
y: array [] string = { "a", "b", "c" };
z: array [] array [] string = { {"a","b","c"}, {"x","y","z"} };

g: array [3] string;
h: array [3] string = { "a", "b", "c" };
i: array [2] array [3] string = { {"a","b","c"}, {"x","y","z"} };

===[good1.bminor Output]===
Success!

Program parsed successfully.
Program resolved successfully.


return code: 0


===[good2.bminor Input]===
main: function char () = {

	x: integer;
	x = 1;
}

===[good2.bminor Output]===
Success!

Program parsed successfully.
x resolves to local 1
Program resolved successfully.


return code: 0


===[good3.bminor Input]===
main: function integer (x: integer, y: integer, z: integer);
main: function integer (x: integer, y: integer, z: integer);
main: function integer (x: integer, y: integer, z: integer);
===[good3.bminor Output]===
Success!

Program parsed successfully.
Program resolved successfully.


return code: 0


===[good4.bminor Input]===
main: function integer (x: integer, y: integer, z: integer);


main: function integer (x: integer, y: integer, z: integer) = {
    x++;
}
===[good4.bminor Output]===
Success!

Program parsed successfully.
x resolves to param 1
Program resolved successfully.


return code: 0


===[good5.bminor Input]===
main: function integer (x: integer, y: integer, z: integer) = {
    print x;
}
main: function integer (x: integer, y: integer, z: integer);

===[good5.bminor Output]===
Success!

Program parsed successfully.
x resolves to param 1
Program resolved successfully.


return code: 0


===[good6.bminor Input]===
main: function integer (x: integer, y: integer, z: integer);

main: function integer (x: integer, y: integer, z: integer) =  {
    print x, y;
}
main: function integer (x: integer, y: integer, z: integer);

main: function integer (x: integer, y: integer, z: integer);


===[good6.bminor Output]===
Success!

Program parsed successfully.
x resolves to param 1
y resolves to param 2
Program resolved successfully.


return code: 0


===[good7.bminor Input]===
main: function integer (x: integer, y: integer, z: integer) = {

    x++;
    y: integer = x;
    z--;
}
===[good7.bminor Output]===
Success!

Program parsed successfully.
x resolves to param 1
x resolves to param 1
z resolves to param 3
Program resolved successfully.


return code: 0


===[good8.bminor Input]===
main: function integer (x: integer, y: integer, z: integer) = {

    x++;
    y:integer = x;
    z--;
    z = z = x;
    if (z){
        x = 6;
    }
}

main2: function integer (x: integer, y: integer, z: integer);
===[good8.bminor Output]===
Success!

Program parsed successfully.
x resolves to param 1
x resolves to param 1
z resolves to param 3
z resolves to param 3
z resolves to param 3
x resolves to param 1
z resolves to param 3
x resolves to param 1
Program resolved successfully.


return code: 0


===[good9.bminor Input]===
main: function integer (x: integer, y: integer, z: integer);
main: function integer (x: integer, y: integer, z: integer);
main: function integer (x: integer, y: integer, z: integer);
main: function integer (x: integer, y: integer, z: integer);
main: function integer (x: integer, y: integer, z: integer);
test: function char ();
x: integer = 3;

main: function integer (x: integer, y: integer, z: integer) = {
    x: integer = 3;
    t: integer = x + y + z;
    i: integer;
    for (i=0; i<x; i++) {
        x: integer = 3;
        y = z + x + y + i;
        y++;
        y: integer = 3;
        if (3) {
            x: integer = y + z;
        } else if (2) {
            x: integer = 1;
        } else if (4) {
            z: integer = main(x, y, z);
            if (2) {
                x: integer;
                x = y = z;
                y = test(1, 2, z);
            }
        }
    }
}

main: function integer (x: integer, y: integer, z: integer);
test: function char ();
test: function char () = {
    return 4;
}


===[good9.bminor Output]===
Success!

Program parsed successfully.
x resolves to local 1
y resolves to param 2
z resolves to param 3
i resolves to local 3
i resolves to local 3
x resolves to local 1
i resolves to local 3
y resolves to param 2
z resolves to param 3
x resolves to local 1
y resolves to param 2
i resolves to local 3
y resolves to param 2
y resolves to local 2
z resolves to param 3
main resolves to global main
x resolves to local 1
y resolves to local 2
z resolves to param 3
x resolves to local 1
y resolves to local 2
z resolves to local 1
y resolves to local 2
test resolves to local 6
z resolves to local 1
Program resolved successfully.


return code: 0


====Bad Tests====
===[bad0.bminor Input]===

main: function void () = {
    print i;
	print "hi";
}
===[bad0.bminor Output]===
Success!

Program parsed successfully.
resolve error: i is not defined
Program failed to resolve.


return code: 1


===[bad1.bminor Input]===


main: function void () = {
    i: integer;
	print j;
}
===[bad1.bminor Output]===
Success!

Program parsed successfully.
resolve error: j is not defined
Program failed to resolve.


return code: 1


===[bad2.bminor Input]===


main: function void() ={
	
	if (x) return 5;

	
}
===[bad2.bminor Output]===
Success!

Program parsed successfully.
resolve error: x is not defined
Program failed to resolve.


return code: 1


===[bad3.bminor Input]===
main: function void() ={
	
	print x
	x:integer = 5 ** 5;
	
}
===[bad3.bminor Output]===
Success!

parse error: syntax error


return code: 1


===[bad4.bminor Input]===
main:function void()={

    test_funct();
}
===[bad4.bminor Output]===
Success!

Program parsed successfully.
resolve error: test_funct is not defined
Program failed to resolve.


return code: 1


===[bad5.bminor Input]===

main:function void()={

    for (i; i; i)
}
===[bad5.bminor Output]===
Success!

parse error: syntax error


return code: 1


===[bad6.bminor Input]===
func1: function integer (x:integer, y:char) =
{	
	if (x){
		return 1 + 1 + z ;
	}	
	
}
===[bad6.bminor Output]===
Success!

Program parsed successfully.
x resolves to param 1
resolve error: z is not defined
Program failed to resolve.


return code: 1


===[bad7.bminor Input]===


func1: function integer (x:integer, y:char) =
{
    if (1){
        return z;
    }
        
}
===[bad7.bminor Output]===
Success!

Program parsed successfully.
resolve error: z is not defined
Program failed to resolve.


return code: 1


===[bad8.bminor Input]===

func1: function integer (x:integer, y:char) =
{
    if (x){
        return z;
    }
    else if{
        return z;
    }
    else{
        return z;
    }
        
}
===[bad8.bminor Output]===
Success!

parse error: syntax error


return code: 1


===[bad9.bminor Input]===
func1: function integer (x:integer, y:char) =
{	
	for (;;){
		if (x){
			for (; ; ){
				return z;
			}
				
		}
		else if{

			return z;
		}
		else{
			return z;
		}
	}
        
}
===[bad9.bminor Output]===
Success!

parse error: syntax error


return code: 1


=====HIDDEN TESTS=====
====Good Tests====
===[good1.bminor Input]===
/* Correct: x used but not defined. */

x: integer = 10;

===[good1.bminor Output]===
Success!

Program parsed successfully.
Program resolved successfully.


return code: 0


===[good10.bminor Input]===
/* Correct: Many variables to resolve. */

D: function integer() = {
        d1: integer = 5;
        d2: integer = d1 + 1; //6
        {
                d3: integer = 9;
                d2: integer = d3 + d1 - 3; //11
                d4: integer = -1;
                d2 = d2 + d3; //20
                print d2 - d4, "\n";
        }
        d4: integer = 16;
        print d2 - d4, '\n';
        {
                d4: integer = -2;
                d3: integer = 1000;
                print d3 + 10;
                print "\n";
                print d4;
                print '\n';
        }
        print d4;
        return 3;
}

main: function integer () = {
        return D();
}

===[good10.bminor Output]===
Success!

Program parsed successfully.
d1 resolves to local 1
d3 resolves to local 1
d1 resolves to local 1
d2 resolves to local 2
d2 resolves to local 2
d3 resolves to local 1
d2 resolves to local 2
d4 resolves to local 3
d2 resolves to local 2
d4 resolves to local 3
d3 resolves to local 2
d4 resolves to local 1
d4 resolves to local 3
D resolves to global D
Program resolved successfully.


return code: 0


===[good2.bminor Input]===
/* Correct: redefining a name at the local scope. */

x: integer = 10;

f: function void () = {
     x: integer = 20;
     print x, "\n";
}


===[good2.bminor Output]===
Success!

Program parsed successfully.
x resolves to local 1
Program resolved successfully.


return code: 0


===[good3.bminor Input]===
/* Correct: redefining a name at the local scope. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     x: integer = 20;
     if(a<b) {
          x: integer = 30;
          print x, "\n";
     } else {
          print "a>=b\n";
     }
}



===[good3.bminor Output]===
Success!

Program parsed successfully.
a resolves to param 1
b resolves to param 2
x resolves to local 1
Program resolved successfully.


return code: 0


===[good4.bminor Input]===
/* Correct: Accessing names in different scopes. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }

}


===[good4.bminor Output]===
Success!

Program parsed successfully.
a resolves to param 1
b resolves to param 2
x resolves to global x
y resolves to local 1
z resolves to local 1
Program resolved successfully.


return code: 0


===[good5.bminor Input]===
/* Correct: f is called multiple times from main. */
/* (Should resolve the expression before adding the decl of y. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = a * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     f(40,30);
}



===[good5.bminor Output]===
TEST NOT PASSED

parse error: syntax error


return code: 1


===[good6.bminor Input]===
/* Correct: f is prototyped, then defined, then called. */

x: integer = 10;

f: function void ( a: integer, b: integer );

f: function void ( a: integer, b: integer ) = {
     y: integer = a * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     f(40,30);
}




===[good6.bminor Output]===
TEST NOT PASSED

parse error: syntax error


return code: 1


===[good7.bminor Input]===
/* Correct: f is prototyped, then called, then defined. */

x: integer = 10;

f: function void ( a: integer, b: integer );

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     f(40,30);
}

f: function void ( a: integer, b: integer ) = {
     y: integer = a * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}



===[good7.bminor Output]===
TEST NOT PASSED

parse error: syntax error


return code: 1


===[good8.bminor Input]===
/* Correct: Resolver should work all the way down the tree. */

f: function void ( n:integer, s: string ) =
{
	i:integer;

	for(i=0;i<n;i++) { 
		if( i%2 == 0 ) {
			print i, "is even\n";
		} else {
			print i, "is odd\n";
		}
	}

	/* We can open a new scope with braces */
	{
		i: integer;
		j: integer;
		for(i=0;i<n;i++) {
			for(j=0;j<n;j++) {
				print i, ":", j, " -> ", i*j, " ", s, "\n";
			}
		}
	}
}

===[good8.bminor Output]===
Success!

Program parsed successfully.
i resolves to local 1
i resolves to local 1
n resolves to param 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
n resolves to param 1
i resolves to local 1
j resolves to local 2
j resolves to local 2
n resolves to param 1
j resolves to local 2
i resolves to local 1
j resolves to local 2
i resolves to local 1
j resolves to local 2
s resolves to param 2
Program resolved successfully.


return code: 0


===[good9.bminor Input]===
/* Correct: Different functions can define variables with same params and locals. */

x: integer = 10;

f: function integer ( x: integer ) =
{
	y: integer = 20;
	return x*y;
}

g: function void ( x: integer ) =
{
	y: integer = 30;
	return x*y;
}

main: function integer ( argc: integer, argv: array [] string ) =
{
	return f(x) + g(x);
}

===[good9.bminor Output]===
TEST NOT PASSED

parse error: syntax error


return code: 1


===[good11.bminor Input]===
e: function integer () = {
        e: integer = 100;
	return e;
}

main: function integer () = {
        return e();
}

===[good11.bminor Output]===
Success!

Program parsed successfully.
e resolves to local 1
e resolves to global e
Program resolved successfully.


return code: 0


====Bad Tests====
===[bad1.bminor Input]===
/* Error: name already used in the global scope. */
x: integer = 10;
x: integer = 20;


===[bad1.bminor Output]===
Success!

Program parsed successfully.
error: redeclarationProgram failed to resolve.


return code: 1


===[bad10.bminor Input]===
/* Error: Function has the same name as a declared variable. */

str: string = "hello";

str: function string ( s: string ) = 
{
	return "goodbye";
}


===[bad10.bminor Output]===
Success!

Program parsed successfully.
error: redeclaration
Program failed to resolve.


return code: 1


===[bad2.bminor Input]===
/* Error: Variable z went out of scope. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = 20;
     if(a<b) {
          z: integer = 30;
	  print "a<b\n";
     }
     print x, " ", y, " ", z, "\n";
}


===[bad2.bminor Output]===
Success!

Program parsed successfully.
a resolves to param 1
b resolves to param 2
x resolves to global x
y resolves to local 1
resolve error: z is not defined
Program failed to resolve.


return code: 1


===[bad3.bminor Input]===
/* Error: Cannot refer to variable y in its own definition. */
/* (Should resolve the expression before adding the decl of y. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
	  print "a<b\n";
     } else {
          print "a>=b\n";
     }
     print x, " ", y, " ", z, "\n";
}


===[bad3.bminor Output]===
Success!

Program parsed successfully.
resolve error: y is not defined
a resolves to param 1
b resolves to param 2
x resolves to global x
y resolves to local 1
resolve error: z is not defined
Program failed to resolve.


return code: 1


===[bad4.bminor Input]===
/* Error: f has multiple definitions. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

f: function string ( s: string ) = {
    print "hello";
    return "goodbye";
}


===[bad4.bminor Output]===
Success!

Program parsed successfully.
resolve error: y is not defined
a resolves to param 1
b resolves to param 2
x resolves to global x
y resolves to local 1
z resolves to local 1
error: redeclaration of function code
Program failed to resolve.


return code: 1


===[bad5.bminor Input]===
/* Error: f is called prior to definition. */

x: integer = 10;

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     f(40,30);
}

f: function void ( a: integer, b: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}



===[bad5.bminor Output]===
Success!

parse error: syntax error


return code: 1


===[bad6.bminor Input]===
/* Error: g is not defined. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     g(40,30);
}


===[bad6.bminor Output]===
Success!

parse error: syntax error


return code: 1


===[bad8.bminor Input]===
/* Error: x not defined, deep down in the expression. */

a: integer;

f: function integer ( b: integer ) =
{
	c: integer;
	for(c=0;c<b;c++) {
		if(a<b) {
			print a + b * (c / (a+x)), "\n"; 
		}
	}
	return b;
}

===[bad8.bminor Output]===
Success!

Program parsed successfully.
c resolves to local 1
c resolves to local 1
b resolves to param 1
c resolves to local 1
a resolves to global a
b resolves to param 1
a resolves to global a
b resolves to param 1
c resolves to local 1
a resolves to global a
resolve error: x is not defined
b resolves to param 1
Program failed to resolve.


return code: 1


===[bad9.bminor Input]===
/* Error: x redefined after several intervening scopes. */

a: integer;

f: function integer ( b: integer ) =
{
	x: integer = 20;
	{
		i: integer;
		for(i=0;i<x;i++) print i;
	}
	{
		j: integer;
		for(j=0;j<x;j++) print j;
	}
	x: integer = 30;

	return x;
}

===[bad9.bminor Output]===
Success!

Program parsed successfully.
i resolves to local 1
i resolves to local 1
x resolves to local 1
i resolves to local 1
i resolves to local 1
j resolves to local 1
j resolves to local 1
x resolves to local 1
j resolves to local 1
j resolves to local 1
error: redeclarationx resolves to local 1
Program failed to resolve.


return code: 1


===== SUMMARIZED PARSER RESULTS =====
{
  "student_tests": {
    "Good": {
      "correct": 10,
      "incorrect": 0
    },
    "Bad": {
      "correct": 10,
      "incorrect": 0
    }
  },
  "hidden_tests": {
    "Good": {
      "correct": 7,
      "incorrect": 4
    },
    "Bad": {
      "correct": 9,
      "incorrect": 0
    }
  }
}

Resolver Project Grade
-------------------

General Structure: 20/25
---------------------------------
A number of parsing issues

Resolver - Manual Checks 20/25 
--------------------------------------------
Local variables regardless of scope should increment the 
which counter, eg in bad9.bminor x should be local 0 and i local 1

Student Tests: 20/20
---------------------------
Passes all your tests.

Hidden Tests: 10/20
---------------------------
Fails 5 hidden tests. One of which (bad7) caused the program to hang. It is shown below.
A number of bad tests failed from syntax errors as well which was not the intent. 

/* Error: Two parameters have the same name */
/* Also, b is not defined. */

f: function void ( a: integer, a: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

Code Style: 10/10
------------------------
Looks good. Nice work

Total: 85/100
------------------------------------------
